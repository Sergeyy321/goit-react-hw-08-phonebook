{"version":3,"file":"static/js/851.b41374ce.chunk.js","mappings":"6NACaA,EAAkBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uDAM5BC,EAAQJ,EAAAA,GAAOK,MAAKC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2HASpBI,EAAMP,EAAAA,GAAOQ,OAAMC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,qJCGrBO,EAAS,WAAH,IAAIC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,E,6BC7BKG,EAAW,SAAAC,GAAK,OAAIA,EAAMC,SAASC,MAAMP,EAAG,EAC5CQ,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,SAASC,KAAM,E,SCItDE,EAASlB,EAAO,GAChBmB,EAAWnB,EAAO,GACXoB,EAAY,WACzB,IAAMX,GAAKY,EAAAA,EAAAA,IAAYR,GACfS,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA2BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhCE,EAAKD,EAAA,GAAEE,EAASF,EAAA,GAEjBhB,GAAWM,EAAAA,EAAAA,IAAYJ,GAEvBiB,EAAW,SAAAC,GACf,IAAAC,EAAwBD,EAAIE,OAApBT,EAAIQ,EAAJR,KAAMU,EAAKF,EAALE,MACL,SAATV,EAAkBC,EAAQS,GAASL,EAAUK,EAC/C,EAQA,OACEC,EAAAA,EAAAA,KAAClD,EAAe,CAAAmD,UACdC,EAAAA,EAAAA,MAAA,QACEC,OAAO,GACPC,SAAU,SAAAC,GACRA,EAAEC,iBAEA9B,EAAS+B,MACP,SAAAR,GAAK,OACHA,EAAMV,KAAKmB,sBAAwBnB,EAAKmB,mBAAmB,IAG/DC,MAAM,GAADC,OAAIrB,EAAI,2BAEbN,GAAS4B,EAAAA,EAAAA,IAAW,CAACzC,GAAAA,EAAImB,KAAAA,EAAMI,MAAAA,KApBvCH,EAAQ,IACRI,EAAU,GAsBN,EAAEO,SAAA,EAEFC,EAAAA,EAAAA,MAAA,SAAOU,QAASjC,EAAOsB,SAAA,EACrBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,UACJD,EAAAA,EAAAA,KAAC7C,EAAK,CACJe,GAAIS,EACJoB,MAAOV,EACPwB,KAAK,OACLlB,SAAUA,EACVN,KAAK,OACLyB,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAGZd,EAAAA,EAAAA,MAAA,SAAOU,QAAShC,EAASqB,SAAA,EACvBD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,YACJD,EAAAA,EAAAA,KAAC7C,EAAK,CACJe,GAAIU,EACJiC,KAAK,MACLd,MAAON,EACPE,SAAUA,EACVN,KAAK,SACLyB,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,QAGZhB,EAAAA,EAAAA,KAAC1C,EAAG,CAACuD,KAAK,SAAQZ,SAAC,oBAI3B,C","sources":["components/Phonebook/Phonebook.styled.jsx","../node_modules/nanoid/index.browser.js","redux/selector.js","components/Phonebook/Phonebook.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const PhonebookStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\n\nexport const Input = styled.input`\n  width: 150px;\n  border-radius: 5px;\n\n  background: #aeaeae;\n  border: 2px solid #3600cb;\n  padding: 2px;\n`;\n\nexport const Btn = styled.button`\n  padding: 10px;\n  margin: 15px;\n  border-radius: 5px;\n  background-color: #806eb1;\n  border: 2px solid #806eb1;\n  margin-top: 20px;\n`;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","\nexport const selectFilter = state => state.filter;\n\nexport const selectId = state => state.contacts.items.id;\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n ","import { PhonebookStyled, Input } from './Phonebook.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Btn } from './Phonebook.styled';\nimport { useState } from 'react';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\nimport { selectId } from 'redux/selector';\nconst nameId = nanoid(9);\nconst numberId = nanoid(9);\nexport const Phonebook = () => {\nconst id = useSelector(selectId);\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n\n  const onChange = evt => {\n    const { name, value } = evt.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n \n\n  return (\n    <PhonebookStyled>\n      <form\n        action=\"\"\n        onSubmit={e => {\n          e.preventDefault();\n          if (\n            contacts.some(\n              value =>\n                value.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n            )\n          ) {\n            alert(`${name} is alredy in contacts`);\n          } else {\n            dispatch(addContact({id, name, phone }));\n          }\n          reset();\n        }}\n      >\n        <label htmlFor={nameId}>\n          <h2>Name</h2>\n          <Input\n            id={nameId}\n            value={name}\n            type=\"text\"\n            onChange={onChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberId}>\n          <h2>Number</h2>\n          <Input\n            id={numberId}\n            type=\"tel\"\n            value={phone}\n            onChange={onChange}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <Btn type=\"submit\">Add contact</Btn>\n      </form>\n    </PhonebookStyled>\n  );\n};\n"],"names":["PhonebookStyled","styled","div","_templateObject","_taggedTemplateLiteral","Input","input","_templateObject2","Btn","button","_templateObject3","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectId","state","contacts","items","selectContacts","nameId","numberId","Phonebook","useSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setNumber","onChange","evt","_evt$target","target","value","_jsx","children","_jsxs","action","onSubmit","e","preventDefault","some","toLocaleLowerCase","alert","concat","addContact","htmlFor","type","pattern","title","required"],"sourceRoot":""}